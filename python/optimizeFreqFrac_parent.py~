# -*- coding: utf-8 -*-
"""
Created on Sat Nov 04 09:25:32 2017

@author: miguel
"""

import createSystem
import optimization
import parameters
import numpy as np
import routeC
import sys
import os.path
import os

# This script should be called as optimizeFreqFrac_parent.py factor fleet nu s0 s1 s2 s3 npopu mprob ntol seed firstchromo

basedata = 'data/'
baseprogram = ''


def createfilename(slabel):
    text=basedata+'optim_multnode_data'
    for label in slabel[1:12]:
        text+='_'+label
    return text


# Return the file, create it if it does not exist and open it if it does
def checkfile(filename):
    if os.path.isfile(filename):
        f=open(filename,'a')
    else:
        f=open(filename,'w')
    return f

    

if __name__ == '__main__':  
    
    if len(sys.argv)<12:
        print("WARNING!!!! The script has not been called in the form python optimizefreqfrac_parent.py factor fleet nu s0 s1 s2 s3 npopu mprob ntol")
        sys.exit()

    # Defining the parameters
    factor=int(sys.argv[1]) # The passenger factor
    print("The passenger factor has been set to %d"%factor)

    fleet=int(sys.argv[2]) # The fleet size
    print("The fleet size is set to %d"%fleet)

    nu=float(sys.argv[3]) # The user experience cost
    print("The opportunity cost is set to %f"%nu)

    # The stop arrangement at the main hubs
    s=[int(sys.argv[4]), 4-int(sys.argv[4]),int(sys.argv[5]),  4-int(sys.argv[5]),int(sys.argv[6]),  4-int(sys.argv[6]),int(sys.argv[7]),  4-int(sys.argv[7])]    
    print("The stop arrangement at the m ain hubs is:")
    print(s)

    # The population size
    npopu=int(sys.argv[8])
    print("The population size has been set to %d"%npopu)
    
    # The mutation probability
    mprob=float(sys.argv[9])
    print("The mutation probability has been set to %f"%mprob)

    # The converging tolerance
    ntol=int(sys.argv[10])
    print("The convergence tolerance is set to %d"%ntol)

    # The seed
    seed=int(sys.argv[11])
    np.random.seed(seed)
    print("The seed of the simulation has been set to %d"%seed)

    # The firstchromo
    if len(sys.argv) > 12:
        firstchromo=sys.argv[12]
        print("There is a first chromosome "+firstchromo+". It corresponds to a configuration:")
        print(optimization.GAgetPers(firstchromo))

    # The Line IDs, times and offsets
    LineIDs=[0,1,2,3,4,5,6,7,8,9]
    LineOffsets=[0,0,10,10,20,20,30,30,0,0]
        
    # The configuration at the main hubs, stations S16(15), S17(16), S36(35), S37(36)
    MH=[6,7,16,17]

    # Creating the stop lists
    stoplist=[]
    # services E1, W1 stop at every station
    stoplist.append(np.arange(parameters.NStations)) # E1,W1
    # services E3, W3, stop every three stations and additionally stop at stations S2(1), S17(16), S36(35)
    stoplist.append(np.array([2,5,7,8,11,14,17,18,21,24])-1) # E2, W2
    # services E5, W5, stop every 5 stations. They dont stop at stations S1(0), S46(45), and stop at stations S2(1), S17(16),S37(36), S45(44)
    stoplist.append(np.array([1,6,7,8,12,17,18,22,25])-1) # E3, W3
    # services E9, W9 stop every 9 stations. They additionally stop at stations S16(15), S17(16), S36(35)
    stoplist.append(np.array([1,7,8,17,18,25])-1) # E4, W4

    # Creating the system, the wagons are asigned
    wagons=np.zeros((len(LineIDs),parameters.NStations))
    # by default, the services E1(W1) stop at wagon 1(3)
    for i in stoplist[0]:
        wagons[0,i]=1
        wagons[1,i]=3
        
    # service E3(W3) will stop at wagon 3(1)
    for i in stoplist[1]:
        wagons[2,i]=3
        wagons[3,i]=1

    # service E5(W5) will stop at wagon 3(1), if an E3 service also stops there, it will then stop at wagon 2(2)
    for i in stoplist[2]:
        if wagons[2,i]>0: # if service E3 stops there
            wagons[4,i]=2
            wagons[5,i]=2
        else:
            wagons[4,i]=3
            wagons[5,i]=1

    # serbice E9(W9) will stop at wagon 3(1), if an E3 or an E5 service also stops there, it will then stop at wagon 2(2) 
    for i in stoplist[3]:
        if wagons[2,i]>0 or wagons[4,i]: # if service E3 or E5 stops there stops there
            wagons[6,i]=2
            wagons[7,i]=2
        else:
            wagons[6,i]=3
            wagons[7,i]=1

    #[wagons[1,i]=3 for i in stoplist[0]]
    for station in MH:
        wagons[0,station]=s[0]
        wagons[1,station]=s[1]
        wagons[2,station]=s[2]
        wagons[3,station]=s[3]
        wagons[4,station]=s[4]
        wagons[5,station]=s[5]
        wagons[6,station]=s[6]
        wagons[7,station]=s[7]




    # The routematrix filenam MUST BE UPDATED
    RMfile=baseprogram+'RouteMatrix.txt'


    # Creating the IN, OUT and TransferMatrix
    IN=np.loadtxt(baseprogram+'IN.txt')
    OUT=np.loadtxt(baseprogram+'OUT.txt')
    Tr=np.loadtxt(baseprogram+'TR.txt')


    # creatiÂºng the lines and stations
    [lines,stations,limits]=createSystem.createsystem(wagons, stoplist)
    xmax=limits[1]
    xmin=limits[0]
        
    # Calling the route matrix
    RouteMatrix, RouteWeight = routeC.readRouteMatrixFile(RMfile,stations)

    fileroot=createfilename(sys.argv)
    
    # removing all temporary files first
    for File in os.listdir(basedata):
        if File.endswith(".tmp"):
            os.remove(basedata+File)

    #Setting a seed
    # firstchromo='0010001000100010001000100010001011111111100'
    #Scanning over the different densities 
    if len(sys.argv) == 12:
        [Neval,bestTC,bestTCSD,bestp]=optimization.GAoptimize(IN,Tr,lines,stations,limits,LineIDs,LineOffsets,RouteMatrix,RouteWeight,factor,nu,fleet,npopu,mprob,ntol,fileroot)
    
    elif len(sys.argv) == 13:
        [Neval,bestTC,bestTCSD,bestp]=optimization.GAoptimize(IN,Tr,lines,stations,limits,LineIDs,LineOffsets,RouteMatrix,RouteWeight,factor,nu,fleet,npopu,mprob,ntol,fileroot, firstchromo)

    #When the script finishes we create a finished file
    finished = open(fileroot+'_finished.tmp', 'w')
    finished.close()

